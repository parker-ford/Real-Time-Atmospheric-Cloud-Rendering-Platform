#pragma kernel CSMain

#include "UnityCG.cginc"
#include "../Includes/noise.cginc"

struct Pixel {
    float4 color;
};

RWStructuredBuffer<Pixel> pixels;
float resolution;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 uvw = float3(id.xyz) / resolution;
    
    Pixel pixel = pixels[id.x + id.y * resolution + id.z * resolution * resolution];



    float perlinNoise = perlinNoise_3D_fbm(uvw, .8, 8, 3);

    float cellSize = 4;

    float worleyNoise0 = 1.0 - worleyNoise_3D(uvw, cellSize * 2);
    float worleyNoise1 = 1.0 - worleyNoise_3D(uvw, cellSize * 8);
    float worleyNoise2 = 1.0 - worleyNoise_3D(uvw, cellSize * 14);

    float worleyFBM = worleyNoise0*0.625f + worleyNoise1*0.25f + worleyNoise2*0.125f;

    float perlinWorleyNoise = remap_f(perlinNoise, 0.0f, 1.0f, worleyFBM, 1.0f);
    // float perlinWorleyNoise = remap_f(worleyFBM, 0.0, 1.0, 0.0, perlinNoise);

    pixel.color = float4(perlinWorleyNoise, perlinWorleyNoise, perlinWorleyNoise, 1);

    pixels[id.x + id.y * resolution + id.z * resolution * resolution] = pixel;
}

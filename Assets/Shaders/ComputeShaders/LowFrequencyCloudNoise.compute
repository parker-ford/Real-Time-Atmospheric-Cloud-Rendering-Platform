#pragma kernel CSMain

#include "UnityCG.cginc"
#include "../Includes/noise.cginc"

struct Pixel {
    float4 color;
};

RWStructuredBuffer<Pixel> pixels;
float resolution;

float turbulentNoise(float3 pos, float initialFrequency, float roughness, int octaves) {
    float amplitude = 1.0;
    float total = 0.0;
    float frequency = initialFrequency;
    float maxAmplitude = 0.0;

    for(int i = 0; i < octaves; i++) {
        total += perlinNoise_3D(pos, frequency) * amplitude;
        // pos += perlinNoise_3D(pos, frequency);
        frequency *= 2.0;
        maxAmplitude += amplitude;
        amplitude *= roughness;
    }
    // return total;
    return total / maxAmplitude;
}

float perlinWorleyNoiseSample(float3 uvw, float f, float4 fMult, float2 range){
    float perlinNoise = turbulentNoise(uvw, f, 0.54, 6);
    perlinNoise = remap_f(perlinNoise, -0.6, 0.6, 0.0, 1.0);

    float worleyNoise1 = worleyNoise_3D(uvw, f * fMult.z);
    worleyNoise1 = 1.0 - worleyNoise1;
    worleyNoise1 *= -0.1;

    float perlinWorleyNoise = perlinNoise;
    perlinWorleyNoise = remap_f(perlinNoise, worleyNoise1, 1.0, 0.0, 1.0);

    float worleyNoise2 = worleyNoise_3D(uvw, f * fMult.w);
    worleyNoise2 = 1.0 - worleyNoise2;
    worleyNoise2 *= -0.1;

    perlinWorleyNoise = remap_f(perlinWorleyNoise, worleyNoise2, 1.0, 0.0, 1.0);


    float worleyNoise3 = worleyNoise_3D(uvw, f * fMult.x);
    worleyNoise3 *= 0.5f;

    perlinWorleyNoise = remap_f(perlinWorleyNoise, worleyNoise3, 1.0, 0.5, 1.0);

    float worleyNoise4 = worleyNoise_3D(uvw, f * fMult.y);
    worleyNoise4 *= 0.2f;

    perlinWorleyNoise = remap_f(perlinWorleyNoise, worleyNoise4, 1.0, 0.0, 1.0);

    perlinWorleyNoise = remap_f(perlinWorleyNoise, range.x, range.y, 0.0, 1.0);

    return perlinWorleyNoise;

}

float octaveWorleyNoise(float3 uvw, float baseFreq, float2 range){
    float worleyNoise1 = worleyNoise_3D(uvw, baseFreq * 19);
    worleyNoise1 /= 3.0;

    float worleyNoise2 = worleyNoise_3D(uvw, baseFreq * 10);

    float worleyNoise3 = worleyNoise_3D(uvw, baseFreq * 25);
    worleyNoise3 /= 6.0;

    float worleyNoise4 = worleyNoise_3D(uvw, baseFreq * 37);
    worleyNoise4 /= 8.0;

    float worleyNoise5 = worleyNoise_3D(uvw, baseFreq * 5);
    worleyNoise5 /= 3.0;

    float worleyNoise = worleyNoise1 + worleyNoise2 + worleyNoise3 + worleyNoise4 + worleyNoise5;
    worleyNoise /= 5.0;

    worleyNoise = 1.0 - worleyNoise;

    worleyNoise = remap_f(worleyNoise, range.x, range.y, 0.0, 1.0);

    return worleyNoise;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 uvw = float3(id.xyz) / resolution;
    
    Pixel pixel = pixels[id.x + id.y * resolution + id.z * resolution * resolution];

    float perlinWorleyFreq = 5.0;
    float4 fMult = float4(2.0, 4.0, 17.0, 33.0);
    float2 range = float2(-0.1, 1.1);
    // float r = perlinWorleyNoiseSample(uvw, perlinWorleyFreq, fMult, range);
    float r = octaveWorleyNoise(uvw, 0.5, float2(0.5, 1.0));

    float worleyFreq1 = 1.0;
    float2 worleyRange1 = float2(0.5, 1.0);
    float b = octaveWorleyNoise(uvw, worleyFreq1, worleyRange1);

    float worleyFreq2 = 1.7;
    float2 worleyRange2 = float2(0.5, 1.0);
    float g = octaveWorleyNoise(uvw, worleyFreq2, worleyRange2);

    float worleyFreq3 = 2.2;
    float2 worleyRange3 = float2(0.5, 1.0);
    float a = octaveWorleyNoise(uvw, worleyFreq3, worleyRange3);


    // float col = a;
    // pixel.color = float4(col, col, col, 1.0);
    pixel.color = float4(r, g, b, a);


    pixels[id.x + id.y * resolution + id.z * resolution * resolution] = pixel;
}

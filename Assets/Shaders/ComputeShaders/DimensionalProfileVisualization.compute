#pragma kernel CSMain

#include "UnityCG.cginc"
#include "../Includes/noise.cginc"

struct Pixel {
    float4 color;
};

RWStructuredBuffer<Pixel> pixels;
float resolution;

float worleyNoiseSmooth_2D(float2 p, float cellSize, uint seedOffset){

    //Interval between cells
    float interval = 1.0 / cellSize;

    //Initial min distance
    float minDist = interval;

    //Initial cell that point resides in
    float2 baseCell = floor(p * cellSize) / cellSize;

    //Loop through all surrounding cells
    for(int x = -1; x <= 1; x++){
        for(int y = -1; y <= 1; y++){

            //Get neighboring cell
            float2 cellOffset = float2(float(x) * interval, float(y) * interval);
            float2 cell = baseCell + cellOffset;

            //Wrap cell around edges
            float2 wrappedCell = modulo(cell, float2(1.0, 1.0));

            //Generate pseudo random offset based on cell
            uint seed = seedGen_ui2(uint2(wrappedCell.x * _ScreenParams.x, wrappedCell.y * _ScreenParams.y));
            float2 rand = random_2D(seed + seedOffset);

            //Find distance to cell
            float2 cellPosition = cell + (rand * interval);
            float2 toCell = cellPosition - p;
            if(length(toCell) < minDist){
                minDist = length(toCell);
            }
        }
    }
//
    float result = smoothstep(0.0, 1.0, minDist / interval);
    return result;
}

float2 LOCALgradientVector_2D(float2 input, uint seedOffset){

    //TODO: Maybe make more gradient vectors
    float2 vectors[8] = {
        float2(1.0, 1.0),
        float2(1.0, -1.0),
        float2(-1.0, 1.0),
        float2(-1.0, -1.0),
        float2(1.0, 0.0),
        float2(0.0, -1.0),
        float2(0.0, 1.0),
        float2(-1.0, 0.0),
    };

    int seed = seedGen_ui2(int2(input.x * _ScreenParams.x, input.y * _ScreenParams.y));
    int r = pcgHash_ui(seed + seedOffset);
    r = pcgHash_ui(r);
    float2 v = vectors[r & 7];

    return v;
}

float LOCALperlinNoise_2D(float2 p, float cellSize, int f, uint seedOffset) {

    //Interval between cells
    float i = 1.0 / cellSize;

    //Cell that this pixel lies in
    float2 id = floor(p * cellSize) / cellSize;

    //Cordinates of cell corners
    float2 tl = float2(id.x, id.y);
    float2 tr = float2(id.x + i, id.y);;
    float2 bl = float2(id.x, id.y + i);
    float2 br = float2(id.x + i, id.y + i);

    //Wrap around
    tl = modulo(tl, float2(f,f));
    tr = modulo(tr, float2(f,f));
    bl = modulo(bl, float2(f,f));
    br = modulo(br, float2(f,f));

    //Vector from corners of cell to point
    float2 v_tl = remap_f2(float2(p.x - id.x, p.y - id.y), 0.0, i, 0.0, 1.0);
    float2 v_tr = remap_f2(float2(p.x - id.x - i, p.y - id.y), 0.0, i, 0.0, 1.0);
    float2 v_bl = remap_f2(float2(p.x - id.x, p.y - id.y - i), 0.0, i, 0.0, 1.0);
    float2 v_br = remap_f2(float2(p.x - id.x - i, p.y - id.y - i), 0.0, i, 0.0, 1.0);

    //Gradient vectors at each cell corner
    float2 gv_tl = LOCALgradientVector_2D(tl, seedOffset);
    float2 gv_tr = LOCALgradientVector_2D(tr, seedOffset);
    float2 gv_bl = LOCALgradientVector_2D(bl, seedOffset);
    float2 gv_br = LOCALgradientVector_2D(br, seedOffset);

    //Fade value
    float fx = fade((p.x * cellSize) - floor(p.x * cellSize));
    float fy = fade((p.y * cellSize) - floor(p.y * cellSize));

    //Dot product of corner gradient and vector to point
    float dot_tl = dot(v_tl, gv_tl);
    float dot_tr = dot(v_tr, gv_tr);
    float dot_bl = dot(v_bl, gv_bl);
    float dot_br = dot(v_br, gv_br);

    //Bilinear interpolation
    float n_t = lerp(dot_tl, dot_tr, fx);
    float n_b = lerp(dot_bl, dot_br, fx);
    float n = lerp(n_t, n_b, fy);

    return n;
}

float LOCALperlinNoise_2D_fbm(float2 p, float H, float freq, float numOctaves, uint seedOffset){
    float G = exp2(-H);
    float f = 1.0;
    float a = 1.0;
    float t = 0.0;
    for(int i = 0; i < numOctaves; i++){
        t += a * LOCALperlinNoise_2D(p * f, freq, f, seedOffset);
        f *= 2.0;
        a *= G;
    }

    return t;
}


float octaveWorleyNoise(float2 uv, float baseFreq, float2 range){
    float worleyNoise1 = worleyNoise_2D(uv, baseFreq * 19);
    worleyNoise1 /= 3.0;

    float worleyNoise2 = worleyNoise_2D(uv, baseFreq * 10);

    float worleyNoise3 = worleyNoise_2D(uv, baseFreq * 25);
    worleyNoise3 /= 6.0;

    float worleyNoise4 = worleyNoise_2D(uv, baseFreq * 37);
    worleyNoise4 /= 8.0;

    float worleyNoise5 = worleyNoise_2D(uv, baseFreq * 5);
    worleyNoise5 /= 3.0;

    float worleyNoise = worleyNoise1 /*+ worleyNoise2 + worleyNoise3 + worleyNoise4 + worleyNoise5*/;
    worleyNoise /= 5.0;

    worleyNoise = 1.0 - worleyNoise;

    worleyNoise = remap_f(worleyNoise, range.x, range.y, 0.0, 1.0);

    return worleyNoise;
}


float _PerlinFrequency;
float _WorleyFrequency;


[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2(id.xy) / resolution;
    
    Pixel pixel = pixels[id.x + id.y * resolution];

    float2 center = float2(0.5, 0.5);
    float outerRadius = 0.3;
    float innerRadius = 0.1;


    // Calculate the distance from the current pixel to the center
    float dist = length(uv - center);

    // Calculate the gradient value
    float val = 1.0 - saturate((dist - innerRadius) / (outerRadius - innerRadius));

    // val =  1.0 - val;

    // float worleyNoise_2D_fbm(float2 p, float intervalOffset, float H, float freq, float numOctaves){
    // float worley = octaveWorleyNoise(uv, 1, float2(0.9, 1.0));
    float worley = worleyNoise_2D_fbm(uv, 0, 1.5, 5, 5);
    float perlin = LOCALperlinNoise_2D_fbm(uv, 0.5, 1, 1, 0);
    perlin = remap_f(perlin, -1.0, 1.0, 0.0, 1.0);

    // float noise = lerp(perlin, worley, saturate(pow(uv.y, 0.5) * 1.5 ));
    float noise = 0.9 * worley + 0.1 * perlin;


    val = saturate(noise - (1.0 - val));

    // val = noise;

    // val *= 0.8;
    // val = 1.0 - val;

    // val = perlin;
    val = 1.0 - worley;

    
    pixel.color = float4(val, val, val, 1);

    pixels[id.x + id.y * resolution] = pixel;
}